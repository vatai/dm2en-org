# -*- mode:org; mode: flyspell; eval: (org-sbe "sel") -*-

#+SETUPFILE: ../include/lecture.h.org
#+INCLUDE: ../tikz/graph-common.org
# 
# #+STARTUP: latexpreview

#+NAME: sel 
#+BEGIN_SRC elisp :results silent :exports none
  ;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  ;; (text-scale-set 2)
  ;;(org-tree-slide-mode)
  ;; (setq org-beamer-frame-default-options "allowframebreaks")
  ;; (setq org-beamer-frame-default-options "shrink")
  (setq org-beamer-frame-default-options "")
  (setq org-display-inline-images t)
#+END_SRC

#+TITLE: Discrete mathematics II. - Graphs
#+SHORT_TITLE: Graphs
# #+INCLUDE: l-inc.org

#+LATEX_HEADER: \usepackage{readarray}
#+LATEX_HEADER: \newcommand\abs[1]{\lvert #1 \rvert}
#+BEGIN_EXPORT latex
\newcommand{\dijkstrag}[2]{
  \readarraysepchar{,}
  \getargsC{#1}
  \begin{tikzpicture}[>=latex]
    \path[every node/.style={circle,draw,fill=cyan!20,inner
      sep=1pt,label distance=-2}] %
    (0,0) node[fill=\argvi,label={$s$}] (s) {$\argi$} %
    (2,2) node[fill=\argvii,label={$v_1$}] (v1) {$\argii$} %
    (4,0) node[fill=\argviii,label={$v_2$}] (v2) {$\argiii$} %
    (2,0) node[fill=\argix,label=225:{$v_3$}] (v3) {$\argiv$} %
    (2,-2) node[fill=\argx, label=below:{$v_4$}] (v4) {$\argv$}; %
    \draw[->,every node/.style={fill=white,draw=lightgray,inner
      sep=1}] %
    (s) edge[color=\argxi] node[] {$10$} (v1) %
    (s) edge[color=\argxi] node[] {$5$} (v3) %
    (v1) edge[color=\argxii] node[] {$1$} (v2) %
    (v1) edge[color=\argxii,bend left] node[] {$2$} (v3) %
    (v2) edge[color=\argxiii,bend left] node[] {$4$} (v4) %
    (v3) edge[color=\argxiv,bend left] node[] {$3$} (v1) %
    (v3) edge[color=\argxiv] node[] {$9$} (v2) %
    (v3) edge[color=\argxiv] node[] {$2$} (v4) %
    (v4) edge[color=\argxv] node[] {$7$} (s) %
    (v4) edge[color=\argxv,bend left] node[] {$6$} (v2); %
    \node[align=center] at (2,-3) {#2};
  \end{tikzpicture}
}
#+END_EXPORT
* COMMENT Some intuition and motivation
** What are graphs
*** Dotas connected with lines or arrows
    - Try ~graph G { node[stype=filled, color=green] ...}~
    #+NAME: house
    #+BEGIN_SRC dot :file "tmp0.png"
    graph G {  
    node[stype=filled, color=green]
    a,b,c }
    #+END_SRC

    #+RESULTS: house
    [[file:tmp0.png]]

*** So what do we need?
    :PROPERTIES:
    :BEAMER_OPT: allowframebreaks
    :END:
**** Vertices
     - The dots are called *vertices* or *vertexes* or *nodes*
     - The set of vertices is $V$
       # #+CALL_house()
**** Edges
     - The lines between vertices are *edges*
     - We will have both
       - undirected edges (lines) and
       - directed edges (arrows)
     - The set of edges is $E$
**** Why do we need edges
     - Is it possible to define the edges as \(E \subset V\times V\)?
       - E.g. the edge between 1 and 2 is the pair $(1,2)$
       - or if the graph is undirected, then $\{1,2\}$ 
       - Yes, sometimes... but we want a definition as general as
	 possible
     - But what if we want more then one edge between two vertices
       #+BEGIN_SRC dot :file "tmp1.png"
       graph G { 
       a[color=red]; b[color=blue]; c[color=green];
       a -- b [color=pink];
       a -- b [color=orange];
       c -- c [color=purple];
       }
       #+END_SRC

**** Asd
     #+BEGIN_SRC dot :file "tmp.png"
     graph G { a -- b; a -- c; a -- d; }
     #+END_SRC

     #+RESULTS:
     [[file:tmp.png]]

     #+BEGIN_SRC dot :file "tmp.png"
     graph G { 
      # Vertices
      a [shape=box];
      # Edges
      a -- b [color=red]; a -- b [color=blue]; c -- c; }
     #+END_SRC

     #+RESULTS:
     [[file:tmp.png]]

* Un\-directed graphs
** Basic definitions
*** Definition of an undirected graph
**** Undirected graph
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
    An *undirected graph* or (just) a *graph* is a triplet
    $G=(\varphi,E,V)$, where
    - $V$ is the *set of vertices*, 
    - $E$ is the *set of edges* and
    - $\varphi:E\to \wp(V)$ is the *connection map*, so that
      $\varphi(e)=\{v_1,v_2\}\subseteq V$ for each $e\in E$.
**** Remark
     $E=\dmn(\varphi)$ is always true.
*** Terminology
    :PROPERTIES:
    :BEAMER_OPT: allowframebreaks
    :END:
**** Connection and endpoints 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     If $e\in E$ and $v\in \varphi(e)$, then *the edge $e$ is
     connected to the vertex $v$* or *the vertex $v$ is an endpoint of
     edge $e$*.
**** Isolated vertex 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     If no edge is connected to $v\in V$, then $v$ is an *isolated
     vertex*.
**** Empty graph 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     If $E=\emptyset$ \ie it has no edges, then it is an *empty
     graph*.
*** Some questions
**** Why the complicated definition
     - Do we need $E$?
*** Adjacency
**** Adjacency of edges 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Two different *edges $e_1$ and $e_2$ are adjacent* or $e_1$ and
     $e_2$ are *neighbours* if $\varphi(e_1) \cap \varphi(e_2) \neq
     \emptyset$, \ie there is a common vertex to which they are
     connected to.
**** Adjacency of vertices 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Similarly, two different *vertices $v_1$ and $v_2$ are adjacent*
     or $v_1$ and $v_2$ are *neighbours* if $\varphi(e) = \{v_1,
     v_2\}$, \ie if there is a common edge of which they are endpoints
     of.
*** Simple graphs and multi\-graphs
**** Loops, parallel edges 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - An edge connected to only one vertex is called a *loop*.
     - Two different edges $e_1$ and $e_2$ are *parallel* if
       $\varphi(e_1)=\varphi(e_2)$ \ie they are connected to the same
       vertices.
**** Simple graph, multi\-graph 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A graph is a *simple graph* if it contain no loops and no parallel edges.
     - A graph is a *multi\-graph* if it contains loops or parallel edges.
*** Finite and infinite graph
**** Finite and infinite graph 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - If the number of elements in both $E$ and $V$ is finite, then we
       have a *finite graph*, otherwise it is an *infinite graph*.
     - If not stated otherwise, all graphs mentioned will be finite.  
*** A function on a set of vertices
**** A function on a set of vertices 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - For a graph $G=(\varphi,E,V)$ and $S\subseteq V$, let \[
       E(S)=\bigl\{e \in E : \exists v \in S \land \exists v' \in V
       \setminus S \land \varphi(e)=\{v,v'\} \bigr\}, \] \ie $E(S)$ is
       the set of edges which connect to one vertex (one endpoint) in
       $S$ and the other in $V\setminus S$.  

     - Note: $E(S)=E(V\setminus S)$.
*** Degree of a vertex
**** Degree of a vertex 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *degree* of a vertex $v\in V$ is the number of edges
       connected to $v$ counting the loops twice \ie 
       #+BEGIN_EXPORT latex
       \begin{align} \deg(v) &=
       \underbrace{\lvert \{ e \in E : v \in \varphi(e) \}
       \rvert}_{\text{all edges (including loops)}} +
       \underbrace{\lvert \{e \in E : \varphi(e) = \{v\} \}
       \rvert}_{\text{loops}} \\ 
       &= \underbrace{ \lvert
       S(\{v\}) \rvert}_{\text{all edges (excluding loops)}} + 2\cdot
       \underbrace{ \lvert \{e\in E : \varphi(e) = \{v\}
       \}\rvert}_{\text{loops}} 
       \end{align}
       #+END_EXPORT
     - Sometimes the notation $d(v)$ or $\delta(v)$ is used.
*** Regular and \(n\)-regular graphs
**** Regular, and \(n\)-regular graphs 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
    - A graph is *\(n\)-regular* (for $n\in\N$) if $\deg(v)=n$ for
      each $v\in V$.
    - A graph is *regular* if $\exists n\in\N$ for which it is
      \(n\)-regular.
**** Equivalent definition of isolated vertices			  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
     A vertex $v\in V$ is isolated iff $\deg(v)=0$.
**** Even and odd vertices :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A vertex $v$ is *odd* if $\deg(v)$ is odd and $v$ is
     *even* if $\deg(v)$ is *even*.
*** The number of edges and the sum of degrees
**** The number of edges and the sum of degrees                   :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If $G=(\varphi,E,V)$ is a finite graph, then $\sum_{v\in
     V}\deg(v) = 2 \lvert E \rvert$
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Starting from an empty graph, the introduction of each new edge
     increases the total of degrees by $2$. If $\varphi(e) = \{v_1,
     v_2\}$, then both $\deg(v_1)$ and $\deg(v_2)$ increase by 1, or
     if $\varphi(e) = \{v\}$ (loop), then $\deg(v)$ increases by 2.
**** Corollary :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Every graph has an even number of odd vertices.
*** Example							  :B_example:
    :PROPERTIES:
    :BEAMER_env: example
    :END:
**** Graph							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
     #+ATTR_LATEX: :height 4cm
     [[file:../tikz/graph1.tikz]]
**** Values 							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
     - $V=\{v_1,v_2,v_3,v_4,v_5\}$
     - $E=\{e_1,e_2,e_3,e_4,e_5\}$
       - $\varphi(e_1)=\varphi(e_2)=\{v_1,v_2\}$
       - $\varphi(e_3)=\{v_1,v_4\}$
       - $\varphi(e_4)=\{v_3,v_4\}$
       - $\varphi(e_5)=\{v_4\}$
     - $e_1$ and $e_2$ are parallel
     - $e_5$ is a loop
     - $v_5$ is isolated
       - $\deg(v_1)=3$
       - $\deg(v_2)=2$
       - $\deg(v_3)=1$
       - $\deg(v_4)=4$
       - $\deg(v_5)=0$
** Isomorphic graphs
*** Isomorphism
**** Isomorphism of graphs				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The graphs $G=(\varphi,E,V)$ and $G'=(\varphi',E',V')$ are
     *isomorphic* if 
     - $\exists f\colon V\to V'$ bijection,
     - $\exists g\colon E\to E'$ bijection and
     - $\forall e \in E$ and $\forall v \in V$ if $v'=f(v)$ and
       $e'=g(e)$ then \[v \in \varphi(e) \iff v' \in \varphi'(e'),\]
       \ie the $(f,g)$ pair of maps "preserves" the connection
       relation.
*** Why is isomorphism important?
**** The isomorphism of graphs is very important!
     - Ironically, we rarely use it explicitly. 
     - Because the /focus of interest/ is the connection relation
       between the edges and vertices, \ie dots connected with lines.
     - If we ignore the (names of) the edges and vertices, we can
       study all of the graphs isomorphic to each other.
     - Isomorphism is used throughout the study of graphs, whenever
       $E$ and $V$ are not defined explicitly.
     - It is because of isomorphism, that we can study graphs
       abstractly, without going into unnecessary detail.
     - *Oh, and you need to know it for the exam!!!*
*** Some well known graphs
**** Complete graph, cycle, path, star 			       :B_definition:
    :PROPERTIES:
    :BEAMER_env: definition
    :END:
     - A *complete graph* (or a clique) is a simple graph with an edge
       between each pair of vertices. The complete graph with $n$
       vertices is $K_n$.
     - The *cycle* with $n$ vertices is the graph with $n$ vertices on
       a circle with each vertex connected to its neighbour. This is
       $C_n$.
     - If we delete one edge from $C_{n+1}$ then we obtain the $n$
       long *path* denoted by $P_n$, \ie $n$ edges connecting $n+1$
       vertices forming a single line.
     - A *star* is the graph with $n$ vertices on a circle, each
       connected to the vertex in the center.  The star with $n+1$
       vertices is $S_n$.
     - The *hyper\-cubes* $H_n$ (described later) with $n$ vertices
       are also isomorphic to each other.
*** $K_4,C_4,P_4$ and $S_4$
**** $K_4$ and $C_4$ 						      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.25
     :END:
     #+BEGIN_CENTER
     $K_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:../tikz/k4.tikz]]
     $C_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:../tikz/c4.tikz]]
     #+END_CENTER
**** $P_4$ and $S_4$ 						      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.25
     :END:
     #+BEGIN_CENTER
     $P_3$
     #+ATTR_LATEX: :height 2.5cm
     [[file:../tikz/p4.tikz]] 
     $S_4$
     #+ATTR_LATEX: :height 2.5cm
     [[file:../tikz/s4.tikz]] 
     #+END_CENTER
**** Remarks						    :B_example:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.50
     :BEAMER_env: example
     :END:
     - Because the graphs $K_n$, $C_n$, $P_n$, $S_n$ are actually
       classes (sets) of graphs, we do not specify the edges or the
       vertices.
     - Any graph isomorphic to \eg $K_4$ as seen on the picture is
       also a $K_4$ graph.
*** Bipartite graphs
**** Bipartite graph					 :B_definition:BMCOL:
     :PROPERTIES:
     :BEAMER_env: definition
     :BEAMER_col: 0.6
     :END:
      A $G=(\varphi,E,V)$ graph is a bipartite graph, if $\exists V',
      V'' \subseteq V$ so that
      - $V' \cap V'' = \emptyset$,
      - $V' \cup V'' = V$ and
      - for every edge $e\in E$, $\varphi(e) \cap V' \neq \emptyset$
        and $\varphi(e) \cap V'' \neq \emptyset$
      \ie the set of vertices $V$ of a *bipartite graph* can be split
      into two non-empty, disjoint sets so that $V'\cup V''=V$, and
      each edge has one endpoint in $V'$ and the other in $V''$.
**** Bipartite graph 					    :B_example:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.30
     :BEAMER_env: example
     :END:
      #+BEGIN_CENTER
      #+ATTR_LATEX: :width 2cm
      [[file:../tikz/bp.tikz]]
      #+END_CENTER
*** Cartesian product of graphs
**** Cartesian product					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G_i=(\varphi_i,E_i,V_i)$ (for $i\in I$ \eg
     $I=\{1,2,3,\ldots\}$) be an indexed family of graphs.  The
     *Cartesian product* of these graphs is the graph
     $G=(\varphi,E,V)$, where $V=V_1 \times V_2 \times \cdots$ and two
     vertices are connected if and only if they differ in one
     component only, and if the index of the differing component is
     $j$ then the components are connected in $G_j$. Alternatively
     - $V=\times_{i\in I} V_i=\{(v_1,v_2,\ldots) : v_1 \in V_1 \land
       v_2 \in V_2 \land \cdots \}$,
     - $\varphi(e)=\{v,v'\}$ (for $v=(v_1,v_2,\ldots)$,
       $v'=(v_1',v_2',\ldots)$) if and only if $\exists ! j\in I$ so
       that $\exists e_j \in E_j$ and $\varphi_j(e_j)=\{v_j,v'_j\}$
*** The hyper\-cube
**** The hyper\-cube 						  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
     - The 0-dimensional hyper\-cube $H_0$ consists of one vertex. 
     - The 1-dimensional hyper\-cube $H_1$ consists of two vertices
       connected with a single edge.  
     - For $n>1$, the \(n\)-dimensional hyper\-cube is obtained from the
       Cartesian product of $n$ number of $H_1$ hyper\-cubes, \ie
       \[ H_n = H_{n-1} \times H_1.\]
     An equivalent definition of $H_n$ is: 
     - $V$ contains $n$ long strings of \(0\)'s and \(1\)'s, and there
       is an edge between two vertices if they differ only in one
       element.
** Sub\-graphs
*** Sub\-graphs
**** Sub\-graph 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:      
     $G'=(\varphi',E',V')$ is a *sub\-graph* of $G=(\varphi,E,V)$ (or
     $G$ is a *super\-graph* of $G'$) if $G'$ is a graph and
     $E'\subseteq E$, $V'\subseteq V$ and $\varphi' \subseteq \varphi$.
**** Induced sub\-graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G'=(\varphi',E',V')$ be a sub\-graph of $G=(\varphi,E,V)$.
     $G'$ is a *saturated (or full) sub\-graph induced by $V'$* if
     $E'$ contains all the edges of $G$ with both endpoints in $V'$
     ($G'$ is the largest sub\-graph with edges connected to $V'$) \ie
     \[ e\in E \land \varphi(e) \subseteq V' \iff e \in E' \land
     \varphi'(e)=\varphi(e). \]
*** Complement graph
**** Complement graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *complement graph of $G'$ with regards to $G$* is the graph
       $(\varphi|_{E\setminus E'},E\setminus E',V)$. 
     - If $G$ is a simple graph with $n$ vertices, then the
       *complement of $G$* is the complement of $G$ with regards to
       $K_n$, \ie the complement of a simple graph is the graph with
       the same vertices only the edges missing from the original
       graph.
       
     In the example below we have a simple graph, its complement, and
     the complete graph:
  
     #+BEGIN_CENTER
     [[file:../tikz/comp.tikz]]
     #+END_CENTER
*** Deleting edges end vertices
**** Deleting edges 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  If $E'\subseteq E$, the
     sub\-graph $G'=(\varphi|_{E\setminus E'},E\setminus E',V)$ is
     obtained by *deleting the set of edges $E'$*.
**** Deleting vertices 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  If $V'\subseteq V$, then
     $G'=(\varphi|_{E\setminus E'},E \setminus E',V')$ is the sub\-graph obtained
     by *deleting the set of vertices $V'$*, where $E'=\{e\in E :
     \varphi(e) \cap V' \neq \emptyset\}$ \ie the subset of edges
     which have either endpoint in $V'$.
     
     Note: So if we delete a vertex, all the edges connected to it
     are deleted as well.
*** Walks
**** Walks						 :B_definition:BMCOL:
     :PROPERTIES:
     :BEAMER_env: definition
     :BEAMER_col: 0.45
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  A *walk of length $n$ from
     vertex $v$ to vertex $v'$* is a finite sequence
     $v_0,e_1,v_1,\ldots,v_{n-1},e_n,v_n$, where $v_0=v$ and $v_n=v'$
     and $\varphi(e_i) = \{v_{i-1},v_i\}$, \ie the edge $e_i$ connects
     the vertices $v_{i-1}$ and $v_i$.  If $v=v'$ the walk is a
     *closed walk*, otherwise it is an *open walk*.
**** Walk							  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :BEAMER_col: 0.45
     :END:
     #+BEGIN_EXPORT latex
     \begin{tikzpicture}[node]
     \draw
     (0,0)   node (v1) {$v_1$}
     (0,1)   node (v2) {$v_2$}
     (1,0.5) node (v3) {$v_3$}
     (2,0.5) node (v4) {$v_4$}
     (3,1)   node (v5) {$v_5$}
     (3,0)   node (v6) {$v_6$}
     ;
     \path[every node/.style={fill=none,midway}]
     (v1) edge node[below] {a} (v3) 
     (v2) edge node[above] {b} (v3)
     (v3) edge node[above] {c} (v4)
     (v4) edge node[above] {d} (v5)
     (v5) edge node[right] {e} (v6)
     (v6) edge node[below] {f} (v4)
     ;
     \end{tikzpicture}
     #+END_EXPORT
     - Open walk: $v_1$, $a$, $v_3$, $c$, $v_4$, $f$, $v_6$, $e$, $v_5$,
       $d$, $v_4$, $c$, $v_3$, $b$, $v_2$.
     - Closed walk: $v_1$, $a$, $v_3$, $c$, $v_4$, $f$, $v_6$, $e$, $v_5$,
       $d$, $v_4$, $c$, $v_3$, $a$, $v_1$.
*** Trails
**** Trails						 :B_definition:BMCOL:
     :PROPERTIES:
     :BEAMER_env: definition
     :BEAMER_col: 0.45
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  If all the edges in a walk
     from $v$ to $v'$ are different, then it is a *trail* (or a
     *line*), if this walk is closed then the trail is also a *closed
     trail*, otherwise it is *open*.
**** Trail                                                        :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :BEAMER_col: 0.45
     :END:
     #+BEGIN_EXPORT latex
     \begin{tikzpicture}[node]
     \draw
     (0,0)   node (v1) {$v_1$}
     (0,1)   node (v2) {$v_2$}
     (1,0.5) node (v3) {$v_3$}
     (2,1)   node (v4) {$v_4$}
     (2,0)   node (v5) {$v_5$}
     ;
     \path[every node/.style={fill=none,midway}]
     (v1) edge node[below] {a} (v3) 
     (v2) edge node[above] {b} (v3)
     (v2) edge node[left] {c} (v1)
     (v3) edge node[above] {d} (v4)
     (v4) edge node[right] {e} (v5)
     (v3) edge node[below] {f} (v5)
     ;
     \end{tikzpicture}
     #+END_EXPORT
     - Open trail: $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$, $f$, $v_3$,
       $b$, $v_2$.
     - Closed trail: $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$, $f$, $v_3$,
       $b$, $v_2$, $c$, $v_1$.
*** Paths and cycles
**** Paths, cycles 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi,E,V)$ be a graph.  
     - If all the vertices $v_0,v_1,\ldots,v_n$ are different in a
       walk, it is called a *route* or a *path*.  
     - An /at least 1 long/ closed trail is a *cycle* (or *circle*) if
       all the vertices in the trail are different with the exception
       of the beginning and the end.
*** Distance, diameter
**** Distance						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *distance* between two vertices $v$ and $v'$ is the shortest
     (minimum) length of the walks between them (if there exists a
     walk between them, otherwise it is $+\infty$).
**** Diameter						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *diameter* of a graph is the supremum (least upper bound) of
     the distances between all the vertices in the graph.  (For a
     finite graph, you can use simply the maximum of the lengths).
*** Remarks
**** Paths $\subsetneq$ open trails $\subsetneq$ open walks
     - Every path is an open trail, but there are open trails which
       are not paths.
     - Every open trail is an open walk, but there are open walks
       which are not open trails.
**** Cycle $\subsetneq$ closed trails $\subsetneq$ closed walks
     - Every cycle is a closed trail, but there are closed trails
       which are not cycles.
     - Every closed trail is a closed walk, but there are closed walk
       which are not closed trails.
*** Examples
**** Closed walks 						  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :BEAMER_col: 0.45
     :END:
     #+BEGIN_EXPORT latex
     \begin{tikzpicture}[node]
     \draw
     (0,0)   node (v1) {$v_1$}
     (0,1)   node (v2) {$v_2$}
     (1,0.5) node (v3) {$v_3$}
     (2,1)   node (v4) {$v_4$}
     (2,0)   node (v5) {$v_5$}
     ;
     \path[every node/.style={fill=none,midway}]
     (v1) edge node[below] {a} (v3) 
     (v2) edge node[above] {b} (v3)
     (v2) edge node[left] {c} (v1)
     (v3) edge node[above] {d} (v4)
     (v4) edge node[right] {e} (v5)
     (v3) edge node[below] {f} (v5)
     ;
     \end{tikzpicture}
     #+END_EXPORT
     - $v_1$, $a$, $v_3$, $b$, $v_2$, $c$, $v_1$ is a cycle, a closed
       trail, a closed walk.
     - $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$, $f$, $v_3$, $b$,
       $v_2$, $c$, $v_1$ is an closed trail (and closed walk) but not a
       cycle.
**** Open walks 					    :B_example:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: example
     :END:
     - $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$ is a path, an open
       trail and an open walk.
     - $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$, $f$, $v_3$ is an
       open trail (and an open walk), but not a path.
     - $v_1$, $a$, $v_3$, $d$, $v_4$, $e$, $v_5$, $f$, $v_3$, $d$,
       $v_4$ is an open walk, but not an open trail.
*** Examples
**** Examples and clarification					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     - A walk of length 0 is a path.
     - Walks of length 1 are paths if they are not loops.
     - A path can not contain loops, parallel edges or the same edge
       more than once.  Ergo, paths are also trails.

     - Cycles of length 1 are loop edges, cycles of length 2 contain
       two vertices and two parallel edges.
     - Cycles of length 3, 4 \etc are sometimes referred to as a
       triangle, square etc.
*** Walk to path
**** Walk to path 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     With the previous notation, for each graph $G$, for each walk
     between $v$ and $v'$ ($v\neq v'$), a path between $v$ and $v'$ can be
     obtained in $G$ by deleting adequate $e_i$, $v_i$ pairs.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     If $v_i=v_j$, $i<j$, then let us delete
     $e_{i+1},v_{i+1},e_{i+2},v_{i+2},\ldots,e_j,v_j$ from the walk,
     and repeat this procedure until all of the vertices in the
     remaining walk are all different.  Because the length of the walk
     decreases after each step, the procedure eventually comes to a
     halt.
*** Closed trails are made up of disjoint cycles
**** Closed trails are made up of disjoint cycles 		  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:      
     In every graph $G$, every closed trail of at least one length is
     the union of cycles with disjoint edges.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - If there are no repeating vertices on the trail, except the first
       and the last one, then it is a cycle and we are done.  
     - Otherwise there is at least one vertex recurring on the trail.
       At this vertex the trail can be split into two (shorter) closed
       trails. 
     - By repeating this procedure on the two closed sub\-trails, we
       obtain shorter and shorter closed trail, until we are left with
       only cycles.
** Trees
*** Connected graphs
**** Connectedness, components 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A graph is *connected* if there exists a walk (or equivalently a path) between any two
       vertices of the graph.
     - The relation on $V$ defined on two vertices if and only if they
       are connected via a walk (or path) is an equivalence relation
       (reflexive, transitive and symmetrical).  The sub\-graphs
       spanned by the classes generated by this equivalence relation
       are the *components* of the original graph.
*** Remarks about connectedness
**** Remark about edges and components
     - Two vertices from different components can not be adjacent so
       that each edge belongs to only one component.
**** Equivalent definition of a connected graph
     - A graph is connected if and only if it consists of one
       component.
*** Trees
**** Tree						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *tree* is a connected acyclic graph.
**** Equivalent definitions of trees 				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     The following statements are equivalent for the simple graph $G$:
     1) $G$ is a tree (\ie connected and without cycles);
     2) $G$ is connected, but deleting an edge makes it disconnected;
     3) if $v$ and $v'$ are different vertices of $G$, then there
	exists exactly one path between $v$ and $v'$;
     4) $G$ does not contain any cycles, but the graph obtained by
        adding an edge between two of its vertices has a cycle.
*** Proof :B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:
**** Proof of $1 \iff 2 \iff 3$ 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - $1\Rightarrow 2$: If the edge between $v$ and $v'$ is deleted,
       and the graph is connected, then there is a path between $v$
       and $v'$ in the sub\-graph, so returning that edge would
       introduce a cycle.
     - $2\Rightarrow3$: If there were two different paths between $v$
       and $v'$: $v=v_0,v_1,v_2,\ldots,v_n=v'$ and
       $v=v_0',v_1',v_2',\ldots,v_m' = v'$.  Let $k=\min\{i : v_i\neq
       v_i'\}$.  Deleting the edge between $v_{k-1}$ and $v_k$ would
       leave the graph connected, because in all walks, that edge can
       be replaced with the walk \[ v_{k-1}, v_k', v_{k+1}', \ldots,
       v_m' = v' = v_n, v_{n-1} \ldots, v_{k+1}, v_k.\]
     - $3\Rightarrow 1$: If there is a cycle $v,v',\ldots,v$ in the
       graph, then there are two paths from $v$ to $v'$.
*** Proof
**** Proof of $1\iff 4$ 					    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - $1\Rightarrow 4$: A tree has no cycles and adding a loop, adds
       a cycle. Adding a new edge with endpoints $v\neq v'$ and
       combining this edge with the path from $v$ to $v'$ again
       introduces a cycle.
     - $4\Rightarrow1$: Add a temporary edge to the graph with
       endpoints $v$ and $v'$.  The temporary edge is part of a cycle.
       So deleting the temporary edge from the cycle leaves us with a
       path from $v$ to $v'$ in the original graph. Since this is true
       for each vertex pair $v$, $v'$, the graph is connected.
*** Two vertices with degree one
**** Two vertices with degree one				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If a finite graph $G$ contains no cycles, but contains edges,
     then there are at least two vertices with degree one.  
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     There must be a path of maximal length in $G$, \eg from $v$ to
     $v'$, then either $\deg(v)=1=\deg(v')$ or if \eg $\deg(v)\neq 1$
     then there is a vertex $w$ connected to $v$.
     - If $w$ is not on the path, the path is not of maximal
       length.
     - If $w$ is on the path, the graph would contain a cycle.
*** Number of edges in a tree
**** Alternative definitions of trees 				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     The following statements are equivalent for the simple finite
     graph $G$ with $n$ vertices:
     1) $G$ is a tree;
     2) $G$ has no cycles and has $n-1$ edges;
     3) $G$ is connected and has $n-1$ edges.
*** Proof (part 1)
**** Proof of $1 \Rightarrow 2$ 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - We need to show for acyclic graphs, that connectedness implies
       $n-1$ edges. 
     - For $n=1$ it is trivial, we proceed with induction on $n$.
     - Suppose the statement is true for all graphs with less than $n$
       vertices, and let $G$ be a tree with $n$ vertices and $v_n$ a
       vertex with only one adjacent vertex $v_{n-1}$ (by the previous
       theorem there has to be such $v_n$ vertex). Deleting $v_n$
       reduces the number of edges and vertices by one. The remaining
       graph is also a tree (acyclic and connected), because $v_n$ is
       an endpoint of some path. The induction hypothesis is true for
       the smaller graph, so it will be true for the original graph.
*** Proof (part 2)
**** Proof of $2 \Rightarrow 3$ 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - We need to show for a graph with $n-1$ edges, that if it has no
       cycles, then it is connected.
     - Using the same reasoning and same notation as in the previous
       part of the proof, deleting $v_n$ is connected to $v_{n-1}$,
       and by induction $v_{n-1}$ is connected with the rest of the
       graph.
*** Proof (part 3)
**** Proof of $3 \Rightarrow 1$ 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     - We need to show for a connected graph, that if it has $n-1$
       edges, it has no cycles.
     - If $G$ would have a cycle, then deleting any edge from the
       cycle would leave us with a connected graph.  Continue deleting
       the edges until no cycles are left but leaving the graph
       connected, \ie until a tree is obtained.  If we deleted $k$
       edges, then we obtain a tree with $n$ vertices and $n-k-1$
       edges.  But since we proved that 1 implies 2, only $k=0$ is
       possible.
*** Spanning tree
**** Spanning tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *spanning tree* of $G$ is a sub\-graph $T$ which is a tree
     and has the same set of vertices as $G$.  

     Note: Of course only connected graphs have spanning trees.
**** Existence of Spanning trees 				  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Every connected (finite) graph has a spanning tree.
**** Proof
     - Keep deleting edges of cycles while there are cycles, and while
       the graph remains connected.
     - After a finite number of steps, the process stops: the
       remaining graph has no cycles and it is connected.
*** Number of cycles
**** Number of cycles 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A finite connected graph $G=(\varphi, E, V)$ contains at least
     $\lvert E \rvert-\lvert V \rvert+1$ cycles with different sets of edges.
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     1. Let $T$ be a spanning tree of $G$.  It has $\lvert V \rvert-1$
	edges.
     2. Let $E'$ be the set of edges of $G$ which are not in $T$.
     3. If $e\in E'$, then adding this edge to $T$ introduces a cycle
	$C_e$.
     4. Of course, $C_e$ is part of the original graph.
     5. The edge $e$ is on the cycle $C_e$, but if $e\neq e'\in E'$,
	then $e$ is not in $C_{e'}$, so the sets of edges of each
	cycle $C_e$ for each $e\in E'$ are mutually different.
*** Remarks
    - The set of edges of each cycle $C_e$ is uniquely defined by each
      $e\in E'$, because if adding an edge to the spanning tree $T$
      would yield two different cycles, that would mean that there
      were two different paths between the end points of the edge
      added in $T$, so $T$ wouldn't be a tree.
    - This system of cycles is the *basic cycle system* determined
      by the spanning tree $T$.
    - There might be other cycles in the graph, but it can be shown
      that all cycles can be systematically expressed using the basic
      cycle system.
    - The boundary given in the theorem is only a lower bound, \eg the
      graph defined by the edges of a tetrahedron has more than
      $\lvert E \rvert-\lvert V \rvert+1$ edges.
*** Separating two vertices
**** Separating two vertices 				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\varphi, E, V)$ a graph.  
     - If $v',v''$ are vertices, $V'\subseteq V$, and for each path from
       $v'$ to $v''$, there exists a vertex $v\in V'$ which is on that
       path, then *$V'$ separates $v'$ and $v''$*.
     - If $E'\subseteq E$, and for each path from $v'$ to $v''$ contains
       an edge $e\in E'$, then *$E'$ separates $v'$ and $v''$*.  
**** Remark
     If you delete the elements of $V'$ or $E'$ from $G$, $v'$ and
     $v''$ will end up in different components of the remaining graph.
*** Separating sets
**** Separating sets 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - If there are vertices which are separated by a set of edges
       $E'$, then *$E'$ separates $G$*.
     - If $E'\subseteq E$ separates $G$ and $E'$ has no non-trivial
       subset which also separates $G$, then $E'$ is a *separating
       set*.
**** Remark
     If $E'$ separates $G$, then deleting the $E'$ from $G$ will
     increase the number of components of $G$. The separating set is a
     minimal set which separates $G$.
*** Number of separating sets
**** Number of separating sets 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     In a finite connected graph $G=(\varphi, E, V)$ there are at
     least $\lvert V \rvert-1$ separating sets.
*** Proof of number of separating sets
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Let $T$ be a spanning tree of $G$ and $E'$ the set of its edges.
     1. If we remove an edge $e\in E'$ from $T$ it will be separated
	into two components: $T_1$ and $T_2$.
     2. $\lvert E'\rvert = \lvert V \rvert-1$ and for each edge $e\in
        E'$ the set $E_e=(E\setminus E')\cup\{e\}$ separates $G$ so it
        contains at least one separating set.  $E_e$ separates $G$
        because all the paths from $T_1$ to $T_2$ either go through
        $e$ or one of the edges in $E\setminus E'$.
     3. Let this separating set be $S_e$, so that $e\in S_e$ and
        $S_e\subseteq E_e$, then for each $e\in E'$ the separating
        sets $S_e$ are different.  Moreover, $E_e$ contains exactly
        one cut set which contains $e$ and the edges from $E\setminus
        E'$ which have one end in $T_1$ and the other in $T_2$.
*** Forests
**** Forest 						       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A graph without cycles is a *forest*.  
**** COMMENT TODO DIAGRAM
**** Remarks
     The components of a forest are trees.  Trees are connected
     forests.  The number of edges of a finite forest is: $\lvert V
     \rvert-C$ where $C$ is the number of components.  
*** Spanning forests
**** Spanning forest 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A sub\-graph, which consists of spanning trees of the components
     of its super\-graph is a *spanning forest* of the super\-graph.
**** Remarks
     Forests and spanning forests to unconnected graphs are the same
     as trees and spanning trees to connected graphs.
** Special walks
*** Euler trails
**** Euler trail					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     In a finite graph, a trail form $v$ to $v'$ or a closed trail is
     an *Euler trail* if it contains all edges of the graph.  
**** Parity of degrees in graph with Euler trails
     - If the trail is closed (\ie $v=v'$) then the degrees of all
       vertices are even.  The Euler trail "enters" and "leaves" each
       vertex the same number of times.
     - If $v\neq v'$ then $v$ and $v'$ have odd degrees, and each
       vertex, excluding $v$ and $v'$, have even degrees.
     - The converse is also true.
*** Euler trails
**** Decomposition of finite connected graphs  		  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     1. A finite connected graph contains a *closed* Euler trail if and
	only if all vertices have even degrees.  
     2. If a finite connected graph contains $2s$ number of vertices
        with odd degrees, where $s\in \N^+$, then the graph is made up
        of $s$ number of trails with mutually disjoint sets of edges.
*** Proof (part 1)
**** Proof for $s=0$ 						    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     For $s=0$ \ie when $\forall d(v)$ is even, the proof is
     constructive: Start with a single vertex $v\in V$, which is a
     closed trail with no edges.  Extend this closed trail into a
     longer closed trail, until all edges are used up as follows:
     1. If there is an unused edge, there is a vertex $v'$ connected
        to it.
     2. Start a trail from $v'$ always choosing unused edges.
     3. Because all vertices are connected to an even number of unused
        edges, the procedure/algorithm can only stop at $v'$.
     4. The previous closed trail is extended with the previously
        discovered closed trail, and if there are unused edges, we
        repeat the procedure.
*** Proof (part 2)
**** Proof for $s>0$						    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Let $s>0$.  
     1. Connect the $2s$ number of vertices with odd degrees in pairs
	with $s$ number of temporary edges.
     2. The graph including the temporary edges contains a closed Euler
	trail (because every vertex has even degrees).  
     3. Deleting the $s$ number of virtual edges, breaks up the closed
	Euler trail into $s$ number of open trails with mutually
	disjoint sets of edges.
*** Hamilton paths
**** Hamilton path 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A path from $v$ to $v'$ is a *Hamiltonian path* if it contains
     all vertices of a graph.  
**** Hamiltonian cycle, Hamiltonian graph		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *Hamiltonian cycle* (or Hamiltonian circuit) is a cycle which
     contains all vertices of the graph.  A graph is a *Hamiltonian
     graph* if it contains a Hamiltonian cycle.
*** Ore's theorem
**** Ore's theorem 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $G$ be a (finite and simple) graph with $n\ge 3$ vertices.
     If $\deg(v) + \deg(w) \ge n$ for every pair of non-adjacent
     vertices $v$ and $w$, then $G$ is Hamiltonian.
*** Proof (part 1)
**** Proof of Ore's theorem							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     If a graph is not Hamiltonian, then $\deg(v) + \deg(w) < n$ for
     at least one pair of non-adjacent vertices $v$ and $w$.
     1. For each $G$ graph which is non-Hamiltonian, there is a
	non-Hamiltonian graph $H$ which is a super\-graph of $G$, but
	adding any edge to $H$ would introduce a Hamiltonian cycle.
     2. Let $v$ and $w$ be any two non-adjacent vertices in $H$.
     3. Adding the edge between $v$ and $w$ introduces a Hamiltonian cycle, ergo
	there is a Hamiltonian path $v=v_1,v_2,\ldots,v_n=w$. 
*** Proof (part 2)
**** Proof of Ore's theorem
     5. [@4] For each index $i$ in the range $2 \le i \le n$, consider the two
	possible edges in $H$ from $v_1$ to $v_i$ and from $v_{i-1}$ to
	$v_n$.
     6. At most one of these two edges can be present in $H$,
	otherwise the cycle $v_1, v_2, \ldots, v_{i-1}, v_n,
	v_{n-1}. \ldots, v_i, v_1$,  would be a Hamiltonian cycle.
     7. The total number of edges connected to either $v_1$ or $v_n$ is
	at most equal to the number of choices of $i$, which is $n-1$.
     8. So in $H$, $\deg(v) + \deg(w)<n$.
     9. The degree of vertices in $G$ are at most equal to the degrees
	in $H$, so $\deg(v) + \deg(w)<n$ is also true in $G$.
*** Consequence of Ore's theorem
**** Dirac's theorem 						  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If a finite simple graph $G$ with $n\ge 3$ vertices has
     $\deg(v)\ge n/2$ for all vertices $v$, then $G$ is Hamiltonian.
**** Proof 							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Because $\deg(v)\ge n/2$ for all vertices, $\deg(v)+\deg(w)\ge
     n/2 + n/2=n$, therefore by Ore's theorem, $G$ is Hamiltonian.  
** Labeling of graphs
*** Labeled and weighted graphs
**** Labeled and weighted graphs 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - In practice, edges and/or vertices hold additional data.
     - If $G=(\varphi, E, V)$ is a graph, $L_e$ and $L_v$ are the sets
       of labels (for edges and vertices respectively), furthermore
       the labeling maps of edges and vertices are $\ell_e\colon E \to
       L_e$ and $\ell_v \colon V \to L_v$, then $(\varphi, E, V,
       \ell_e, L_e, \ell_v, L_v)$ is a *labeled graph*.
     - Sometimes only the edges or only the vertices are labeled, then
       the adequate elements are omitted.
     - Sometimes the word *coloring* is used instead of labeling, and
       the labels are called colors.
*** Weighted graphs
**** Weighted graphs
     Often $L_e=\R$ or $L_v=\R$, and in this case the term *weighted
     graph* is used and the weight map $w$ connects the elements of
     the graph to their *weights*.  In a $(\varphi, E, V, w)$ graph
     with weighted edges, the weight of $E' \subseteq E$ is
     \[ w(E')=\sum_{e\in E'}w(e), \] and in a graph with weighted
     vertices, the weight of $V' \subseteq V$ is \[w(V')=\sum_{v\in
     V'}w(v).\]
*** Kruskal's algorithm
**** Kruskal's algorithm					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $G=(\varphi,E,V,w)$ be a finite weighted un\-directed graph.
     The following algorithm finds a spanning forest of $G$ with
     minimal weight.
     1. Initialize: $E'\gets \emptyset$.
     2. Terminate?: If $E'\cup \{e\}$ contains a cycle for each edge
        $e\in E\setminus E'$, then the edges in $E'$ are the edges of
        a minimal weight spanning forest.
     3. Expand $E'$: Let $e\in E\setminus E'$ an unused edge with
        minimal weight which doesn't introduce a cycle in $E$ 
        # \ie $e=\arg\min\{w(e'):e' \in E\setminus E' \land E' \cup \{e'\} \text{ has no cycle}\}$ 
        and set $E'\gets E'\cup\{e\}$. Go to
        step 2.
*** Example
    #+BEGIN_EXPORT latex
    \begin{tikzpicture}
      \path[scale=1.3,every node/.style={draw,circle,inner sep=1pt,minimum
        size=1mm}] (0,0) %
      ++(0,0) node (A) {A} ++(1,0) node (B) {B} ++(1,0) node (C) {C} %
      (0.5,-1) %
      ++(0,0) node (D) {D} ++(1,0) node (E) {E} ++(1,0) node (F) {F} ;
      \path %
      (A) edge node[above] {$1$} (B)
      (B) edge node[above] {$3$} (C)
      (A) edge node[left] {$1$} (D)
      (D) edge node[left] {$1$} (B)
      (D) edge node[below] {$4$} (E)
      (B) edge node[left] {$3$} (E)
      (E) edge node[right] {$2$} (C)
      (C) edge node[right] {$2$} (F)
      (E) edge node[below] {$2$} (F)
      ;
      \path[scale=1.3,every node/.style={draw,circle,fill,inner sep=1pt,minimum
        size=1mm}] (0,-1.5) %
      ++(0,0) node (A) {} ++(1,0) node (B) {} ++(1,0) node (C) {} %
      (0.5,-2.5) %
      ++(0,0) node (D) {} ++(1,0) node (E) {} ++(1,0) node (F) {} ;
      \path %
      (A) edge node[below] {$1$} (B)
      % (B) edge node[above] {$3$} (C)
      % (A) edge node[left] {$1$} (D)
      % (D) edge node[left] {$1$} (B)
      % (D) edge node[below] {$4$} (E)
      % (B) edge node[left] {$3$} (E)
      % (E) edge node[right] {$2$} (C)
      % (C) edge node[right] {$2$} (F)
      % (E) edge node[below] {$2$} (F)
      ;
      \path[scale=1.3,every node/.style={draw,circle,fill,inner sep=1pt,minimum
        size=1mm}] (0,-3) %
      ++(0,0) node (A) {} ++(1,0) node (B) {} ++(1,0) node (C) {} %
      (0.5,-4) %
      ++(0,0) node (D) {} ++(1,0) node (E) {} ++(1,0) node (F) {} ;
      \path %
      (A) edge node[below] {$1$} (B)
      % (B) edge node[above] {$3$} (C)
      (A) edge node[left] {$1$} (D)
      % (D) edge node[left] {$1$} (B)
      % (D) edge node[below] {$4$} (E)
      % (B) edge node[left] {$3$} (E)
      % (E) edge node[right] {$2$} (C)
      % (C) edge node[right] {$2$} (F)
      % (E) edge node[below] {$2$} (F)
      ;

      \path[scale=1.3,every node/.style={draw,circle,fill,inner sep=1pt,minimum
        size=1mm}] (4,0) %
      ++(0,0) node (A) {} ++(1,0) node (B) {} ++(1,0) node (C) {} %
      (4.5,-1) %
      ++(0,0) node (D) {} ++(1,0) node (E) {} ++(1,0) node (F) {} ;
      \path %
      (A) edge node[above] {$1$} (B)
      % (B) edge node[above] {$3$} (C)
      (A) edge node[left] {$1$} (D)
      % (D) edge node[left] {$1$} (B)
      % (D) edge node[below] {$4$} (E)
      % (B) edge node[left] {$3$} (E)
      % (E) edge node[right] {$2$} (C)
      % (C) edge node[right] {$2$} (F)
      (E) edge node[above] {$2$} (F)
      ;
      \path[scale=1.3,every node/.style={draw,circle,fill,inner sep=1pt,minimum
        size=1mm}] (4,-1.5) %
      ++(0,0) node (A) {} ++(1,0) node (B) {} ++(1,0) node (C) {} %
      (4.5,-2.5) %
      ++(0,0) node (D) {} ++(1,0) node (E) {} ++(1,0) node (F) {} ;
      \path %
      (A) edge node[below] {$1$} (B)
      % (B) edge node[above] {$3$} (C)
      (A) edge node[left] {$1$} (D)
      % (D) edge node[left] {$1$} (B)
      % (D) edge node[below] {$4$} (E)
      % (B) edge node[left] {$3$} (E)
      (E) edge node[left] {$2$} (C)
      % (C) edge node[right] {$2$} (F)
      (E) edge node[above] {$2$} (F)
      ;
      \path[scale=1.3,every node/.style={draw,circle,fill,inner sep=1pt,minimum
        size=1mm}] (4,-3) %
      ++(0,0) node (A) {} ++(1,0) node (B) {} ++(1,0) node (C) {} %
      (4.5,-4) %
      ++(0,0) node (D) {} ++(1,0) node (E) {} ++(1,0) node (F) {} ;
      \path %
      (A) edge node[below] {$1$} (B)
      % (B) edge node[above] {$3$} (C)
      (A) edge node[left] {$1$} (D)
      % (D) edge node[left] {$1$} (B)
      % (D) edge node[below] {$4$} (E)
      (B) edge node[left] {$3$} (E)
      (E) edge node[right] {$2$} (C)
      % (C) edge node[right] {$2$} (F)
      (E) edge node[below] {$2$} (F)
      ;
    \end{tikzpicture}
    #+END_EXPORT 
*** Proof (part 1)					    :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
**** Proof of Kruskal's algorithm 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     It is enough to restrict the proof to one component only.  
     1. It is clear, that the result will be a spanning tree $T$.
     2. Suppose a $T'$ spanning tree with minimal weight, which has the
	most possible common edges with $T$, and with smaller weight
	than $T$ (then $T$ is not a spanning tree with minimal weight).
     3. Let $e'$ be an edge of $T'$ which is not an edge of $T$.
     4. If $e'$ is added to $T$ then this will add exactly one $C$
	cycle.
     5. For all $e$ edges of the $C$ cycle, it is true that $w(e)\le
	w(e')$, because if $w(e)>w(e')$ then the algorithm would have
	chosen $e'$ instead of $e$.
     6. If we omit $e'$ from $T'$, then it will not be connected, and
        it will separate into two components.
*** Proof (part 2)					    :B_ignoreheading:
**** Proof of Kruskal's algorithm 				    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     7. [@7] There has to be one more edge $e''$ on the cycle $C$
        which connects the two components ($e''$ is obviously not from
        $T'$), and if we swap $e'$ for $e''$ in $T'$ we get another
        tree $T''$.
     8. We have shown that $w(e'')\le w(e')$.
     9. If $w(e'')<w(e')$, then the weight of $T''$ would be strictly
	less than the weight of $T'$, and that would imply that $T'$ is
	not a spanning tree of minimal weight, which leads to a
	contradiction.
     10. On the other hand, $w(e'')=w(e')$ would imply that $T''$ has
	 more common edges with $T$ than $T'$, which is again a
	 contradiction.
*** Remarks
**** Remark						      :B_block:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: block
     :END:
     - Kruskal's algorithm is an example of a *greedy algorithm*,
       because it always chooses the best possible solution.
     - However this greedy strategy does not always give optimal
       results with all algorithms, \eg see TSP (traveling salesman
       problem).  
       
**** Counter example					      :B_block:BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :BEAMER_env: block
     :END:
     The TSP is equivalent to finding a Hamiltonian path in a graph.
     
     #+BEGIN_EXPORT latex
     \begin{tikzpicture}
     \draw[node]
     (0,0)   node (v1) {$v_1$}
     (0,1.5)   node (v2) {$v_2$}
     (2,1.5)   node (v3) {$v_3$}
     (2,0)   node (v4) {$v_4$}
     ;
     \draw 
     (v1) edge node[left] {0} (v2)
     (v2) edge node[above] {2} (v3)
     (v3) edge node[right] {99} (v4)
     (v4) edge node[below] {2} (v1)
     (v1) edge node[pos=0.2,below] {1} (v3)
     (v2) edge node[pos=0.2,below] {99} (v4)
     ;
     \end{tikzpicture}
     #+END_EXPORT
* Directed graphs
** Basic definitions
*** Directed graph
    # You can imagine directed graphs as a set of dots connected with
    # arrows.
**** Directed graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *directed graph* $G=(\psi, E, V)$ is a triplet with $E$ as the
     set of edges, $V$ as the set of vertices, and $\psi\colon E \to
     V\times V$.  If $\psi(e)=(v,v')$, then $v$ is the *tail endpoint*
     and $v'$ is the *head endpoint* of the edge $e$.
**** Remarks
     - Some authors, define $E\subseteq V\times V$, or a bit
       inaccurately, omit the connection map and use the $G=(E,V)$
       notation.
     - For every directed graph $G=(\psi, E, V)$ there is a
       *corresponding undirected graph* $G'=(\varphi, E, V)$ which can
       be obtained by ``forgetting'' the direction, \ie if $\psi(e) =
       (v,v')$ then $\varphi=\{v,v'\}$.
       It is also said that $G$ is an *orientation* of $G'$.  One
       graph usually has multiple orientations.
*** Other definitions
    Most of the definitions, \eg labels, weights \etc, from undirected
    graphs can be extended onto directed graphs by considering the
    corresponding undirected graph.
**** Transpose, strictly parallel 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *transpose* of the graph $G=(\psi, E, V)$ is $G'=(\psi', E,
       V)$ for which $\psi(e)=(v,v')$ if and only if
       $\psi'(e)=(v',v)$.  (Of course, the reversed loop is equal to
       itself.)
     - The edges $e_1\neq e_2$, are *strictly parallel* if
       $\psi(e_1)=\psi(e_2)$.
*** Other definitions 
**** $E^+(S)$ and $E^-(S)$				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - Let $S\subseteq V$, then $E^+(S)$ the set of edges with tail
       endpoints in $S$ and head endpoints in $V\setminus S$, or
       $E^+(S)=\{e\in E : \exists v \exists v' ( v\in S \land v'\in V
       \setminus S \land (v,v')=\psi(e)) \}$
     - $E^-(S)$ is the set of edges with tail endpoints in $V\setminus
       S$ and head endpoints in $S$ or $E^-(S)=\{e\in E : \exists v
       \exists v' ( v\in S \land v'\in V \setminus S \land
       (v',v)=\psi(e)) \}$
     - $E(S) = E^+(S)\cup E^-(S)$ and $E^+(S)=E^-(V \setminus S)$.
*** Degrees of vertices
**** Out\-degree and in\-degree, sink and source	       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The *out\-degree* of the vertex $v\in V$ is
       $d^+(v)=\lvert \{e\in E : \exists v' (v'\in V \land
       (v,v')=\psi(e) )\} \rvert$ (sometimes $\deg^+(v)$ or $\delta^+(v)$),
       \ie the number of edges with tail endpoint $v$.  If $d^+(v)=0$
       then $v$ is a *sink*.
     - The *in\-degree* of the vertex $v\in V$ is $d^-(v)=\lvert \{e\in
       E : \exists v' (v'\in V \land (v',v)=\psi(e) )\} \rvert$ (sometimes
       $\deg^-(v)$ or $\delta^-(v)$), \ie the number of edges with
       head endpoint $v$.  If $d^-(v)=0$ then $v$ is a *source*.
*** Degrees and edges
**** The connection between the sum of degrees and number of edges :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     - In a finite directed graph, \[ \sum_{v\in V}d^+(v) = \sum_{v\in
       V}d^-(v) = \lvert E \rvert \] since each edge increases both
       sums by one (by introducing one tail and one head endpoint).
** Isomorphic graphs
*** Isomorphism for directed graphs
**** Isomorphism for directed graphs			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The graphs $G=(\psi, E, V)$ and $G'=(\psi', E', V')$ are
     *isomorphic* if $\exists f\colon E \to E'$ bijection and $\exists
     g\colon V\to V'$ bijection, so $\forall e\in E$ $\psi(e)=(v,v')
     \iff \psi'(f(e))=(g(v),g(v'))$ \ie the $(f,g)$ pair preserves the
     "tail" and "head" endpoint relations.
**** Some special graphs 					  :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
     Again we can talk about a class (or set) of graphs as one graph,
     \eg $\vec{C}_n$ is the directed cycle of $n$ vertices;
     $\vec{P}_n$ is the $n$ long directed path; $\vec{S}_n$ is the
     directed star, with $n$ vertices with zero in\-degrees and one
     out\-degrees and one vertex with $n$ in\-degrees and zero
     out\-degrees; $\vec{K}_n$ is the directed complete graph.
** Representation of graphs
*** List representation
**** List representation
     A directed graphs can be represented with an array of lists.
     - After enumerating the vertices, each entry in the array is a
       list of $(n,n')$ pairs, where $n$ is the number of $v$ and
       $n'$ the number of $v'$.
     - Additional information can be stored with the list entries.
     - For undirected graphs, each edge is stored twice, once for each
       endpoint.
*** Matrix representation
    An $m \times n$ matrix is a table of $m$ rows and $n$ columns, and
    the \(i\)-th row and \(j\)-th column is $a_{i,j}$ ($1 \le i \le m$ and
    $1 \le j \le n$).  

    Let $G=(\psi,E,V)$ be a directed graph, $E=\{e_1,e_2,\ldots,e_m\}$,
    $V=\{v_1,v_2,\ldots,v_n\}$.
*** Matrix representation
**** Incidence matrix
     - The *incidence matrix* of $G$ is an $n \times m$ matrix, where $1
       \le i \le n$, $1 \le j \le m$ and $a_{i,j}=1$ if $v_i$ is a tail
       endpoint of $e_j$ and $a_{i,j}=-1$ if $v_i$ is a head endpoint of
       $e_j$.
     - If $G$ is undirected, then the elements of the matrix are
       $\lvert a_{i,j} \rvert$.
**** Adjacency matrix
     - The *adjacency matrix* for $G$ is an $n \times n$ matrix where
       $1 \le i,j \le n$ and $a_{i,j}$ is the number of edges from
       $v_i$ to $v_j$.
     - If $G$ is undirected, $a_{i,i}$ is the number of loop edges
       connected to $v_i$ and $a_{i,j}$ is the number of edges
       connecting $v_i$ and $v_j$.
*** Example of graph matrices
**** Example                                                 :B_column:BMCOL:
     :PROPERTIES:
     :BEAMER_env: column
     :BEAMER_col: 0.3
     :END:
     #+BEGIN_EXPORT latex
     \begin{tikzpicture}[>=latex,scale=0.8]
     \path[every node/.style={circle,draw,fill=cyan!20,minimum size=0.5cm, inner
     sep=1pt,label distance=-2,scale=0.7}] %
     (0,0)  node (v1)  {$v_1$} %
     (2,2)  node (v2) {$v_2$} %
     (4,0)  node (v3) {$v_3$} %
     (2,0)  node (v4) {$v_4$} %
     (2,-2) node (v5) {$v_5$}; %
     \draw[->,every node/.style={fill=white,draw=lightgray,inner
     sep=1}] %
     (v1)  edge[] node[] {$e_2$} (v2) %
     (v1)  edge[] node[] {$e_6$} (v4) %
     (v2) edge[] node[] {$e_1$} (v3) %
     (v2) edge[bend left] node[] {$e_3$} (v4) %
     (v3) edge[bend left] node[] {$e_9$} (v5) %
     (v4) edge[bend left] node[] {$e_4$} (v2) %
     (v4) edge[] node[] {$e_5$} (v3) %
     (v4) edge[] node[] {$e_8$} (v5) %
     (v5) edge[] node[] {$e_7$} (v1) %
     (v5) edge[bend left] node[] {$e_{10}$} (v3); %
     \end{tikzpicture}
     #+END_EXPORT
**** Matrix                                                  :B_column:BMCOL:
     :PROPERTIES:
     :BEAMER_env: column
     :BEAMER_col: 0.7
     :END:
     Incidence matrix:
     #+BEGIN_EXPORT latex
     \begin{equation*}
     \begin{psmallmatrix}
     0 & 1 & 0 & 0 & 0 & 1 &  -1 & 0 & 0 & 0\\
     1 &  -1 & 1 &  -1 & 0 & 0 & 0 & 0 & 0 & 0\\
     -1 & 0 & 0 & 0 &  -1 & 0 & 0 & 0 & 1 &  -1\\
     0 & 0 &  -1 & 1 & 1 &  -1 & 0 & 1 & 0 & 0\\
     0 & 0 & 0 & 0 & 0 & 0 & 1 & -1 & -1 & 1
     \end{psmallmatrix}
     \end{equation*}
     #+END_EXPORT
     Adjacency matrix:
     #+BEGIN_EXPORT latex
     \begin{equation*}
     \begin{pmatrix}
     0 & 1 & 0 & 1 & 0\\
     0 & 0 & 1 & 1 & 0\\
     0 & 0 & 0 & 0 & 1\\
     0 & 1 & 1 & 0 & 1\\
     1 & 0 & 1 & 0 & 0
     \end{pmatrix}
     \end{equation*}
     #+END_EXPORT
** Sub\-graphs
*** Sub\-graphs
**** Directed sub\-graphs				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - The graph $G'=(\psi', E', V')$ is a *directed sub\-graph* of
       $G=(\psi, E, V)$ if $E'\subseteq E$, $V' \subseteq V$ and
       $\psi'\subseteq \psi$.  It also said that $G$ is a *directed
       super\-graph* of $G'$.
     - If $E'$ contains all edges with both tail and head endpoints in
       $V'$, then $G'$ is a *saturated* sub\-graph induced by $V'$.
     - If $G'=(\psi, E', V')$ is a directed sub\-graph of $G=(\psi, E,
       V)$, then the *complement* of $G'$ with respect to $G$ is the
       graph $(\psi\vert_{E\setminus E'}, E\setminus E', V)$.
*** Deleting edges and vertices
**** Deleting edges and vertices from graphs 		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\psi, E, V)$ be a directed graph.
     - If $E'\subseteq E$, then the sub\-graph obtained by deleting the
       set of edges $E'$ is $G'=(\psi\vert_{E\setminus E'}, E\setminus
       E', V)$.
     - If $V'\subseteq V$, then let $E'=\{e\in E : \exists v \exists v'
       (\psi(e)=(v,v') \lor \psi(e)=(v',v)) \land v\in V'\}$ then the
       sub\-graph obtained by deleting the set of vertices $V'$ is
       $G'=(\psi\vert_{E\setminus E'}, E\setminus E', V\setminus V')$.
*** Walks, trails, paths 
**** Directed walks, trails, paths and cycles		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Let $G=(\psi, E, V)$ be a directed graph.  
     - An *directed walk of length $n$ from $v$ to $v'$* in $G$ is a
       finite sequence $v_0,e_1,v_1,e_2,v_2,\ldots,v_{n-1},e_n,v_n$,
       where the $\psi(e_i)=(v_{i-1},v_i)$ for each $1\le i \le n$
       with $v_0=v$ and $v_n=v'$.  If $v=v'$ then it is a *closed
       directed walk*, otherwise it is an *open directed walk*.
     - If all the edges differ in a directed walk, then it is a
       *directed trail*.  If the directed walk is closed, then it is a
       *closed directed trail*, otherwise it is an *open directed
       trail*.
     - A directed walk is a *directed path* if all the
       $v_0,v_1,\ldots,v_n$ vertices are different.  A directed trail
       of at least one length is a *directed cycle*, if all the
       vertices are different except the first and the last one.
*** Strong connectivity
**** Strong connectivity				       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A directed graph is *strongly connected* if between any pair of
       vertices $(v,v')$ there is a directed path from $v$ to $v'$
       and from $v'$ to $v$ as well.
     - On the vertices of a given directed graph, the relation that
       there is a directed path from one vertex to another, and from
       the other one to the first is an equivalence relation, and
       therefore it defines a classification of the vertices.
     - A directed sub\-graph induced by the vertices in one such class
       is a *strong component* of the directed graph.
     - A graph is strongly connected if and only if all of it's
       vertices belong to one class, \ie it has only one strong
       component.
*** Example
    Unlike with undirected graphs, not all edges belong to a
    component.

    #+BEGIN_EXPORT latex
    \begin{tikzpicture}[node]
    \draw
    (0,0)     node (v1) {$v_1$} 
    ++(0,2)   node (v2) {$v_2$} 
    ++(2,-1)  node (v3) {$v_3$} 
    ++(2,0)   node (vp3) {$v_3'$}
    ++(2,1)   node (vp2) {$v_2'$}
    ++(0,-2)  node (vp1) {$v_1'$}
    ;
    \draw[->] 
    (v1) edge (v2) (v2) edge (v3) (v3) edge (v1) 
    (v3) edge (vp3) 
    (vp1) edge (vp2) (vp2) edge (vp3) (vp3) edge (vp1)
    ;
    \end{tikzpicture}
    #+END_EXPORT

    The above graph is connected but not /strongly/ connected.
    $\{v_1,v_2,v_3\}$ and $\{v_1',v_2',v_3'\}$ are the two /strong/
    components of the graph, and the edge between $v_3$ and $v_3'$
    does not belong to either of them.
** Directed trees
*** Directed trees
**** Directed tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - A *directed tree* is a directed graph which is an (undirected)
       tree, and exactly one vertex with in\-degree 0 and all the
       other vertices with in\-degree 1. (A directed tree can be
       defined as the traverse of the above defined graph.)
     - The vertex with in\-degree 0 is the *root* of the tree.
*** Directed trees
**** Depth, height, parent, child, siblings		       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - Using induction on the length of a path, it can be shown, that
       there is exactly one (directed) path to each vertex from the
       root.  The length of this path is the *depth* of the vertex.
     - The maximum of the depths of vertices is the *height* of the
       tree.
     - If there is an edge with $v$ as its tail endpoint and $v'$ as
       its head endpoint, then $v$ is the *parent* of $v'$ and $v'$ is
       a *child* of $v$, If two vertices have the same parent then
       they are *siblings*.
     - The vertices of a directed tree with out\-degree 0 are the
       *leaves*.
*** Directed sub\-trees
**** Directed sub\-tree                                        :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - For each vertex $v$ there is a unique set of vertices to which
       there leads a directed path from $v$.  The directed sub\-graph
       induced by these vertices is a directed tree with $v$ as
       its root, and this directed sub\-graph is the *directed
       sub\-tree* with $v$ as its root.
*** Rooted tree
**** Rooted tree					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     - An undirected tree with a vertex designated as the root is a
       *rooted tree*.
       - There exists exactly one orientation of that tree which is a
         directed tree with the same root vertex as the designated
         one: each vertex is the head endpoint of the last edge of the
         only path from the designated root vertex to the mentioned
         vertex (which will be the tail endpoint for all the other
         edges).
       - Therefore designating a root vertex is equivalent to
	 providing an orientation of a directed tree.
*** Binary trees, ternary trees, \(q\)-ary trees
**** \(q\)-ary tree
     - A *\(q\)-ary tree* is a directed tree with edges labeled with
       non-negative integers less than $q$, so that all edges coming
       from the same vertex have different labels.
     - The most notable case is $q=2$ \ie the *binary tree*: here
       *left edge*, or *left child* and *right edge* or *right child*
       are used instead of labels $0$ and $1$.
       - We remark, that if two \(q\)-ary trees differ only in the labels,
	 they are still considered not equal, \eg in a binary tree with
	 only one edge, it's important if it's a left or a right edge.
     - Directed trees are usually drawn with the root at the top.
       [fn::This isn't consistent with the name ``tree'', but it's
       consistent with the way we think about them, a parent is above
       the children etc.]
*** Dijkstra's algorithm					:B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:
**** Dijkstra's algorithm 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $(\psi, E, V, w)$ be a directed weighted graph with $w(e)>0$
     for each $e\in E$, $s\in V$ and $T\subseteq V$.
     The following algorithm calculates $d(v)=$ the minimal weight of
     directed paths from $s$ to $v$, for each $v\in T$ (or $+\infty$
     if there is no path).
     1. Initialization: $S\gets \emptyset$ ($S$ is the set of
        ``finished'' vertices), $H\gets \{s\}$, $H$ is the set of
        vertices ``being processed'') and $d(s)\gets 0$; $v\in
        V\setminus \{s\}$ $d(v)\gets +\infty$.
     2. Terminate?: If $T\subseteq S$ or $H=\emptyset$, then terminate.
     3. Expand $S$: Let $t\in H$ so that $d(t)=\min\{d(t'):t'\in H\}$.
        $S\gets S\cup \{t\}$ and $H\gets H\setminus \{t\}$, and for
        each edge $e$ coming from $t$ to $v\in V\setminus S$, 
	- if $d(t)+w(e)<d(v)$, then $d(v)\gets d(t)+w(e)$ 
	- if $v\not\in H$, then put $v$ into $H$.
        Go to 2.
*** Example
    #+LATEX: \dijkstrag{ , , , , ,white,white,white,white,white,black,black,black,black,black}{}
    #+LATEX: \dijkstrag{0,\infty,\infty,\infty,\infty,red,white,white,white,white,red,black,black,black,black}{$S=\emptyset$\\$H=\{s\}$}
*** Example
    #+LATEX: \dijkstrag{0,10,\infty,5,\infty,cyan,pink,white,red,white,gray,black,black,red,black}{$S=\{s\}$\\$H=\{v_1,v_3\}$}
    #+LATEX: \dijkstrag{0,8,14,5,7,cyan,pink,pink,cyan,red,gray,black,black,gray,red}{$S=\{s,v_3\}$\\$H=\{v_1,v_2,v_4\}$}
*** Example
    #+LATEX: \dijkstrag{0,8,13,5,7,cyan,red,pink,cyan,cyan,gray,red,black,gray,gray}{$S=\{s,v_3,v_4\}$\\$H=\{v_1,v_2\}$}
    #+LATEX: \dijkstrag{0,8,9,5,7,cyan,cyan,pink,cyan,cyan,gray,gray,black,gray,gray}{$S=\{s,v_1,v_3,v_4\}$\\$H=\{v_2\}$}
*** Proof of Dijkstra's algorithm
**** Proof							    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     The proof is by induction on the $\lvert S \rvert$, by showing
     that:
     1. for every $t\in S$ the value of $d(t)$ is the minimal weight
        of the directed walks from $s$ to $t$, and
     2. if $v\in H$, then every directed walk from $s$ to $v$, which
        has every vertex in $S$ except $v$, has a weight of at least
        $d(v)$.
        
     After the first initialization step, this is trivially true.
     
     Let $t\in H$ (chosen in step 3), and consider an arbitrary
     directed walk with weight $W$ from $s$ to $t$. We will show, that
     $d(t) \le W$: Let $t'$ be the first vertex on the walk which is
     not in $S$ and $W'$ the weight of the sub\-walk from $s$ to $t'$.
     Because we chose $t$ to have minimal value of $d(t)$ we have
     $d(t)\le d(t')$ by 2. of the induction hypothesis $d(t') \le W'$,
     and $W' \le W$ (why?).
*** Proof of Dijkstra's algorithm				:B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:
**** Proof part 2
     Now we prove that if $v\in H$, then every directed walk from $s$
     to $v$, which has every vertex in $S$ except $v$, has a weight of
     at least $d(v)$:

     After updating the value of $d(v)$ in the third step, if a walk
     goes from $s$ to $v$ and its last vertex is not in $S$, then let
     $v'$ be the vertex before the last and $e$ the last edge.
     
     Since $v'\in S$ and the weight of the sub\-walk from $s$ to $v'$
     is at least $d(v')$, the weight of the entire walk has to be at
     least $d(v')+w(e) = d(v)$, and when $v$ is added to $S$, $d(v)$
     can be set at most to this value, and afterwards it can only
     decrease.
* Planar graphs, chromatic number
** Drawing graphs in a plane
*** Planar graphs
**** Planar graph					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *planar graph* is a graph that can be embedded in the plane,
     \ie, it can be drawn on the plane ($\R^2$) in such a way that its
     edges intersect only at their endpoints.  In other words, it can
     be drawn in such a way that no edges cross each other.  Such a
     drawing is called a plane graph *representation* or planar
     *embedding* of the graph.
**** Remark
     Not all graphs are planar, \ie not all graphs can be embedded in
     $\R^2$ (not even all finite graphs are planar).  However every
     (finite) graph can be embedded in $\R^3$.
*** Faces
**** Face                                                      :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     Given a planar embedding of a graph $G$, a *face* is the subset
     of points of the plane bounded by edges of $G$, \ie a face is a
     set of points, such that between any two points of a face, there
     is a line (curve) in the plane, such that it does not cross any
     of the edges (or vertices) of $G$.  A face can be /unbounded/,
     and in that case it is an /external/ face, otherwise it is an
     /internal/ face.
**** Remark
     The status of internal/external face is not significant: An
     external face can become an internal face in a different planar
     embedding, however the number of faces is independent from the
     embedding.
*** Examples
**** Non-planar and planar embedding    
     #+BEGIN_EXPORT latex
         \begin{tikzpicture}[scale=2]
           \path[every node/.style={draw, circle, inner sep=1pt, fill=black, minimum size=1pt}]
           (0,0) node[label=-135:{$v1$}] (v1) {}
           (0,1) node[label=135:{$v2$}] (v2) {}
           (1,0) node[label=-45:{$v3$}] (v3) {}
           (1,1) node[label=45:{$v4$}] (v4) {}
           ;
           \path
           (v1) edge node {$e_1$} (v2)
           (v2) edge node[pos=0.25] {$e_2$} (v3)
           (v3) edge node {$e_3$} (v4)
           (v4) edge node[pos=0.25] {$e_4$} (v1);
           \draw[red] (0.5,0.5) circle (0.1);
         \end{tikzpicture}\hspace{2cm}%
         \begin{tikzpicture}[scale=2]
           \path[every node/.style={draw, circle, inner sep=1pt, fill=black, minimum size=1pt}]
           (0,0) node[label=-135:{$v1$}] (v1) {}
           (0,1) node[label=135:{$v2$}] (v2) {}
           (1,1) node[label=45:{$v3$}] (v3) {}
           (1,0) node[label=-45:{$v4$}] (v4) {}
           ;
           \path
           (v1) edge node {$e_1$} (v2)
           (v2) edge node[pos=0.25] {$e_2$} (v3)
           (v3) edge node {$e_3$} (v4)
           (v4) edge node[pos=0.25] {$e_4$} (v1);
         \end{tikzpicture}
     #+END_EXPORT
**** External/internal faces
     #+BEGIN_EXPORT latex
         \begin{tikzpicture}[scale=0.8]
           \path[every node/.style={draw, circle, inner sep=1pt, fill=black, minimum size=1pt}]
           (0,0) node (v1) {} (0,2) node (v2) {}
           (2,2) node (v3) {} (2,0) node (v4) {}
           (0.5,0.5) node (i1) {} +(0,1) node (i2) {}
           +(1,1) node (i3) {} +(1,0) node (i4) {};
           \path
           (v1) edge  (v2) (v2) edge  (v3) (v3) edge  (v4) (v4) edge  (v1)
           (i1) edge  (i2) (i2) edge  (i3) (i3) edge  (i4) (i4) edge  (i1)
           (i1) edge (v1);
         \end{tikzpicture}\hspace{2cm}%
         \begin{tikzpicture}[scale=0.8]
           \path[every node/.style={draw, circle, inner sep=1pt, fill=black, minimum size=1pt}]
           (0,0) node (v1) {} (0,2) node (v2) {}
           (2,2) node (v3) {} (2,0) node (v4) {}
           (-1.5,0.5) node (i1) {} +(0,1) node (i2) {}
           +(1,1) node (i3) {} +(1,0) node (i4) {};
           \path
           (v1) edge  (v2) (v2) edge  (v3) (v3) edge  (v4) (v4) edge  (v1)
           (i1) edge  (i2) (i2) edge  (i3) (i3) edge  (i4) (i4) edge  (i1)
           (i4) edge (v1);
         \end{tikzpicture}
     #+END_EXPORT
*** Drawing graphs
**** Euler's formula                                              :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Let $G=(\varphi,E,V)$.  For any planar embedding of $G$
     $\abs{E} + 2 = \abs{V} + f$, where $f$ is the number of faces.
**** Sketch of the poof                                             :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Suppose there is a cycle in $G$. By deleting an edge of the
     cycle, two faces are merged, so both $f$ and $\abs{E}$ is reduced
     by $1$. In the end, we obtain a tree for which the equation holds
     (why?).
*** Number of edges and vertices of planar graphs
**** Number of edges and vertices of planar graphs                :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If $G=(\varphi,E,V)$ is a simple, connected, planar graph with
     $\abs{V} \ge 3$, then $\abs{E} \le 3 \abs{V}-6$.
**** Proof                                                          :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     For $\abs{V} = 3$ we have two cases $P_2$ and $C_3$ both of which
     satisfy the inequality.  If $\abs{V} > 3$, then $\abs{E} \ge 3$
     (why?).  Since $G$ is simple, every region is surrounded by at
     least $3$ edges, so counting by faces, there should be $\ge 3f$
     edges, and every edge separates two regions, so $2 \abs{E} \ge
     3f$.  Using Euler's formula we get $2\abs{E} \ge 3(\abs{E} + 2 -
     \abs{V})$ which can be transformed to $\abs{E} \le 3 \abs{V}-6$,
     \ie $\abs{E} \le 3 \abs{V}-6$.
**** Remark
     The theorem holds for disconnected graphs as well, since it can
     be made planar by adding edges.
*** The vertices with the least degree in a planar graph
**** The vertex with the least degree in a planar graph           :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     If $G=(\varphi,E,V)$ be a simple, connected, planar graph, then
     $\delta = \min_{v\in V} \deg(v) \le 5$.
**** Proof                                                          :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     We can assume $\abs{V} \ge 3$ (why?).  Indirectly, suppose
     $\delta \ge 6$. Then $6\abs{V} \le 2\abs{E}$ (why?), furthermore,
     using the previous theorem $2\abs{E} \le 6 \abs{V} - 12$,
     implying $6\abs{V} \le 6\abs{V} - 12$.
     
*** $K_{3,3}$ is not planar
**** Proof that $K_{3,3}$ not planar                                :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Indirectly suppose $K_{3,3}$ is a planar graph with $f$ number of
     faces.  Then $\abs{E} = 9$ and $\abs{V} = 6$ and by Euler's
     formula $f = 5$.  Since it is a simple bipartite graph, each face
     is surrounded by at least $4$ edges (why?), and every edge
     separates at most $2$ faces, so $4f \le 2\abs{E}$, implying $20
     \le 18$, which is a contradiction.
*** $K_5$ is not planar
**** Proof that $K_5$ not planar                                    :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     Indirectly suppose that $K_5$ is a planar graph. Then $\abs{E} =
     10$ and $\abs{V} = 5$, and using the theorem about the number of
     edges and vertices in planar graphs we get: $10 \le 3 \cdot 5 -6
     = 9$, which is a contradiction.
*** Topological iso\-morphism                                   :B_fullframe:
    :PROPERTIES:
    :BEAMER_env: fullframe
    :END:
**** Topologically isomorphic graphs 			       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The finite graphs $G$ and $G'$ are *topologically isomorphic* if
     they can be converted to isomorphic graphs applying the following
     transformation or its inverse a finite number of times: delete a
     vertex with degree two and connect its neighboring vertices with
     an edge.

     #+BEGIN_EXPORT latex
     \begin{tikzpicture}[scale=0.6]
     \filldraw [black] (0,1) circle (1pt)
     (0.9510,0.3090) circle (1pt)
     (0.5877,-0.8090) circle (1pt)
     (-0.5877,-0.8090) circle (1pt)
     (-0.9510,0.3090) circle (1pt)

     (0,2) circle (1pt)
     (1.9021,0.6180) circle (1pt)
     (1.1755,-1.6180) circle (1pt)
     (-1.1755,-1.6180) circle (1pt)
     (-1.9021,0.6180) circle (1pt);

     \draw [green]
     (0,1) circle (4pt);

     \draw [-, thick] (0,1) -- (0,2);
     \draw [-, thick] (0,1) -- (-0.5877,-0.8090);
     \draw [-, thick] (0,1) -- (0.5877,-0.8090);
     \draw [-, thick] (0.9510,0.3090) -- (1.9021,0.6180);
     \draw [-, thick] (0.9510,0.3090) -- (-0.9510,0.3090);
     \draw [-, thick] (0.9510,0.3090) -- (-0.5877,-0.8090);
     \draw [-, thick] (-0.9510,0.3090) -- (0.5877,-0.8090);
     \draw [-, thick] (1.9021,0.6180) -- (0,2);
     \draw [-, thick] (1.9021,0.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.1755,-1.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.9021,0.6180) -- (-1.1755,-1.6180);
     \draw [-, thick] (-1.9021,0.6180) -- (0,2);
     \draw [-, thick] (-0.9510,0.3090) -- (-1.9021,0.6180);
     \draw [-, thick] (-1.1755,-1.6180) -- (-0.5877,-0.8090);
     \draw [-, thick] (1.1755,-1.6180) -- (0.5877,-0.8090);
     \end{tikzpicture}\hfill
     \begin{tikzpicture}[scale=0.6]
     \filldraw [black]
     % (0,1) circle (1pt)
     (0.9510,0.3090) circle (1pt)
     (0.5877,-0.8090) circle (1pt)
     (-0.5877,-0.8090) circle (1pt)
     (-0.9510,0.3090) circle (1pt)

     (0,2) circle (1pt)
     (1.9021,0.6180) circle (1pt)
     (1.1755,-1.6180) circle (1pt)
     (-1.1755,-1.6180) circle (1pt)
     (-1.9021,0.6180) circle (1pt);

     \draw [green]
     (-0.5877,-0.8090) circle (4pt)
     (0.5877,-0.8090) circle (4pt)
     (0,2) circle (4pt);

     %\draw [-, thick] (0,1) -- (0,2);
     %\draw [-, thick] (0,1) -- (-0.5877,-0.8090);
     %\draw [-, thick] (0,1) -- (0.5877,-0.8090);
     \draw [-, thick] (0.9510,0.3090) -- (1.9021,0.6180);
     \draw [-, thick] (0.9510,0.3090) -- (-0.9510,0.3090);
     \draw [-, thick] (0.9510,0.3090) -- (-0.5877,-0.8090);
     \draw [-, thick] (-0.9510,0.3090) -- (0.5877,-0.8090);
     \draw [-, thick] (1.9021,0.6180) -- (0,2);
     \draw [-, thick] (1.9021,0.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.1755,-1.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.9021,0.6180) -- (-1.1755,-1.6180);
     \draw [-, thick] (-1.9021,0.6180) -- (0,2);
     \draw [-, thick] (-0.9510,0.3090) -- (-1.9021,0.6180);
     \draw [-, thick] (-1.1755,-1.6180) -- (-0.5877,-0.8090);
     \draw [-, thick] (1.1755,-1.6180) -- (0.5877,-0.8090);
     \end{tikzpicture}\hfill
     \begin{tikzpicture}[scale=0.6]
     \filldraw [black]
     % (0,1) circle (1pt)
     (0.9510,0.3090) circle (1pt)
     %(0.5877,-0.8090) circle (1pt)
     %(-0.5877,-0.8090) circle (1pt)
     (-0.9510,0.3090) circle (1pt)
     
     %(0,2) circle (1pt)
     (1.9021,0.6180) circle (1pt)
     (1.1755,-1.6180) circle (1pt)
     (-1.1755,-1.6180) circle (1pt)
     (-1.9021,0.6180) circle (1pt);
     
     \draw [red]
     (1.1755,-1.6180) circle (4pt)
     (0.9510,0.3090) circle (4pt)
     (-1.9021,0.6180) circle (4pt);
     
     \draw [blue]
     (-1.1755,-1.6180) circle (4pt)
     (-0.9510,0.3090) circle (4pt)
     (1.9021,0.6180) circle (4pt);
     
     
     %\draw [-, thick] (0,1) -- (0,2);
     %\draw [-, thick] (0,1) -- (-0.5877,-0.8090);
     %\draw [-, thick] (0,1) -- (0.5877,-0.8090);
     \draw [-, thick] (0.9510,0.3090) -- (1.9021,0.6180);
     \draw [-, thick] (0.9510,0.3090) -- (-0.9510,0.3090);
     
     \draw [-, thick] (0.9510,0.3090) -- (-1.1755,-1.6180);
     %\draw [-, thick] (-1.1755,-1.6180) -- (-0.5877,-0.8090);
     
     \draw [-, thick] (-0.9510,0.3090) -- (1.1755,-1.6180);
     %\draw [-, thick] () -- (0.5877,-0.8090);
     
     \draw [-, thick] (1.9021,0.6180) -- (-1.9021,0.6180);
     %\draw [-, thick] () -- (0,2);
     
     \draw [-, thick] (1.9021,0.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.1755,-1.6180) -- (1.1755,-1.6180);
     \draw [-, thick] (-1.9021,0.6180) -- (-1.1755,-1.6180);
     \draw [-, thick] (-0.9510,0.3090) -- (-1.9021,0.6180);
     
     
     \end{tikzpicture}
     #+END_EXPORT
**** Kuratowski's theorem 					  :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     A simple and finite graph can be drawn in a plane if and only if
     it has no sub\-graph topologically isomorphic to the $K_5$
     complete graph with 5 vertices or the $K_{3,3}$ ``three houses,
     three wells'' graph.
** Graph colouring Chromatic number
*** Chromatic number
**** \(k\)-coloring 					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     A *\(k\)-colouring* of a graph $G$ is a vertex colouring
     (labeling) using only $k$ colours, such that no two adjacent
     vertices receive the same colour.
**** Chromatic number					       :B_definition:
     :PROPERTIES:
     :BEAMER_env: definition
     :END:
     The *chromatic number* of a graph is the smallest value of $k$
     possible to obtain a \(k\)-colouring of the graph.
**** Four colour theorem                                          :B_theorem:
     :PROPERTIES:
     :BEAMER_env: theorem
     :END:
     Every planar graph is 4-colourable.
**** The story about the proof.                                     :B_proof:
     :PROPERTIES:
     :BEAMER_env: proof
     :END:
     This was the first
     theorem prooved by a computer, (Appel and Haken 1976).  The
     program ran for 1200 hours and tried 1936 counter examples.
*** About the four colour theorem
**** Remarks
     - There is a bijection between a planar graph with $n$ vertices
       and a maps with $n$ connected regions (or countries).  The
       capitals of the countries are the vertices, and two vertices
       are connected, iff the corresponding countries share a border.
     - Therefore, the four colour theorem states, that the (connected)
       regions on every map can always be coloured using only four
       colours, so that neighbours have different colours.
     - The chromatic number of a graph is $1$ iff it has no edges, and
       $2$ iff it is a bipartite graph.  The chromatic number of
       planar graphs is at most $4$.

